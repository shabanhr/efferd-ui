{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-gallery-1",
  "type": "registry:block",
  "description": "Masonry-style responsive gallery using random images with dynamic aspect ratios.",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "aspect-ratio"
  ],
  "files": [
    {
      "path": "registry/blocks/image-gallery/1/image-gallery.tsx",
      "content": "import React from 'react';\nimport { LazyImage } from './lazy-image';\n\nexport function ImageGallery() {\n\treturn (\n\t\t<div className=\"relative flex min-h-screen w-full flex-col items-center justify-center px-4 py-10\">\n\t\t\t<div className=\"mx-auto grid w-full max-w-5xl grid-cols-1 gap-4 sm:grid-cols-2 md:grid-cols-4\">\n\t\t\t\t{Array.from({ length: 4 }).map((_, col) => (\n\t\t\t\t\t<div key={col} className=\"grid gap-4\">\n\t\t\t\t\t\t{Array.from({ length: 8 }).map((_, index) => {\n\t\t\t\t\t\t\tconst isPortrait = Math.random() > 0.5;\n\t\t\t\t\t\t\tconst width = isPortrait ? 1080 : 1920;\n\t\t\t\t\t\t\tconst height = isPortrait ? 1920 : 1080;\n\t\t\t\t\t\t\tconst ratio = isPortrait ? 9 / 16 : 16 / 9;\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<LazyImage\n\t\t\t\t\t\t\t\t\tinView={true}\n\t\t\t\t\t\t\t\t\tkey={`${col}-${index}`}\n\t\t\t\t\t\t\t\t\talt={`Image ${col}-${index}`}\n\t\t\t\t\t\t\t\t\tsrc={`https://picsum.photos/seed/${col}-${index}/${width}/${height}`}\n\t\t\t\t\t\t\t\t\tratio={ratio}\n\t\t\t\t\t\t\t\t\tfallback={`https://placehold.co/${width}x${height}/`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/blocks/image-gallery/1/lazy-image.tsx",
      "content": "'use client';\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport { useInView } from 'motion/react';\nimport { AspectRatio } from '@/components/ui/aspect-ratio';\n\ninterface LazyImageProps {\n\talt: string;\n\tsrc: string;\n\tclassName?: string;\n\tAspectRatioClassName?: string;\n\t/** URL of the fallback image. default: undefined */\n\tfallback?: string;\n\t/** The ratio of the image. */\n\tratio: number;\n\t/** Whether the image should only load when it is in view. default: false */\n\tinView?: boolean;\n}\n\nexport function LazyImage({\n\talt,\n\tsrc,\n\tratio,\n\tfallback,\n\tinView = false,\n\tclassName,\n\tAspectRatioClassName,\n}: LazyImageProps) {\n\tconst ref = React.useRef<HTMLDivElement | null>(null);\n\tconst imgRef = React.useRef<HTMLImageElement | null>(null);\n\tconst isInView = useInView(ref, { once: true });\n\n\tconst [imgSrc, setImgSrc] = React.useState<string | undefined>(\n\t\tinView ? undefined : src,\n\t);\n\tconst [isLoading, setIsLoading] = React.useState(true);\n\n\tconst handleError = () => {\n\t\tif (fallback) {\n\t\t\tsetImgSrc(fallback);\n\t\t}\n\t\tsetIsLoading(false);\n\t};\n\n\tconst handleLoad = () => {\n\t\tsetIsLoading(false);\n\t};\n\n\t// Load image only when inView\n\tReact.useEffect(() => {\n\t\tif (inView && isInView && !imgSrc) {\n\t\t\tsetImgSrc(src);\n\t\t}\n\t}, [inView, isInView, src, imgSrc]);\n\n\t// Handle cached images instantly\n\tReact.useEffect(() => {\n\t\tif (imgRef.current && imgRef.current.complete) {\n\t\t\thandleLoad();\n\t\t}\n\t}, [imgSrc]);\n\n\treturn (\n\t\t<AspectRatio\n\t\t\tref={ref}\n\t\t\tratio={ratio}\n\t\t\tclassName={cn(\n\t\t\t\t'relative size-full overflow-hidden rounded-lg border',\n\t\t\t\tAspectRatioClassName,\n\t\t\t)}\n\t\t>\n\t\t\t{/* Skeleton / fallback */}\n\t\t\t<div\n\t\t\t\tclassName={cn(\n\t\t\t\t\t'bg-accent/30 absolute inset-0 animate-pulse rounded-md transition-opacity',\n\t\t\t\t\tisLoading ? 'opacity-100' : 'opacity-0',\n\t\t\t\t)}\n\t\t\t\tstyle={{\n\t\t\t\t\twillChange: 'opacity',\n\t\t\t\t\ttransitionTimingFunction: 'ease-out',\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t{imgSrc && (\n\t\t\t\t<img\n\t\t\t\t\tref={imgRef}\n\t\t\t\t\talt={alt}\n\t\t\t\t\tsrc={imgSrc}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t'size-full rounded-md object-cover transition-opacity',\n\t\t\t\t\t\tisLoading ? 'opacity-0' : 'opacity-100',\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttransitionDuration: '1s ',\n\t\t\t\t\t\twillChange: 'opacity',\n\t\t\t\t\t\ttransitionTimingFunction: 'ease-in-out',\n\t\t\t\t\t}}\n\t\t\t\t\tonLoad={handleLoad}\n\t\t\t\t\tonError={handleError}\n\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\tdecoding=\"async\"\n\t\t\t\t\tfetchPriority={inView ? 'high' : 'low'}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</AspectRatio>\n\t);\n}\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "image-gallery"
  ]
}