import { promises as fs } from 'fs';
import path from 'path';
import { rimraf } from 'rimraf';
import { registry } from '../registry/index';

async function buildBlocksData() {
	const items = registry.items.filter((item) => item.name !== 'index');

	const blocksArray = items.map((item) => {
		const cat = item.categories?.[0] ?? '';
		return {
			name: item.name,
			category: cat,
			description: item.description ?? '',
			block_number: item.name.split('-').pop(),
			files: [
				{
					type: 'page',
					name: 'page.tsx',
					path: `registry/blocks/${cat}/${item.name.split('-').pop()}/page.tsx`,
				},
				...(item.files?.map((file) => ({
					type: file.type.replace('registry:', ''),
					name: file.path.split('/').pop(),
					path: file.path.startsWith('@/') ? file.path.replace('@/', '') : `registry/${file.path}`,
				})) ?? []),
			],
		};
	});

	const index = `// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import { Block } from '@/types';

export const blocks: Block[] = ${JSON.stringify(blocksArray, null, 2)};
`;

	console.log(`#️⃣  ${items.length} items found`);

	const outputPath = path.join(process.cwd(), 'config/blocks.ts');
	await fs.writeFile(outputPath, index);
}

async function buildRegistryJsonFile() {
	// Fix the path for registry items.
	const fixedRegistry = {
		...registry,
		items: registry.items.map((item) => {
			const files = item.files?.map((file) => {
				const newPath = file.path.startsWith('@/')
					? file.path.replace('@/', '')
					: `registry/${file.path}`;
				return {
					...file,
					path: newPath,
				};
			});

			return {
				...item,
				files,
			};
		}),
	};

	//  Write the content of the registry to `registry.json`
	rimraf.sync(path.join(process.cwd(), `registry.json`));
	await fs.writeFile(
		path.join(process.cwd(), `registry.json`),
		JSON.stringify(fixedRegistry, null, 2),
	);
}

try {
	await buildBlocksData();
	console.log('✅ Blocks Data file built successfully');
	await buildRegistryJsonFile();
	console.log('✅ Registry JSON file built successfully');
} catch (error) {
	console.error('❌ Build failed with error:');
	console.error(error);
	if (error instanceof Error) {
		console.error('Error stack:', error.stack);
	}
	process.exit(1);
}
