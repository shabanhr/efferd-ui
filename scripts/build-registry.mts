import { promises as fs } from "node:fs";
import path from "node:path";
import { rimraf } from "rimraf";
import { loadCode } from "../lib/utils/code";
import { registry } from "../registry/index";

async function buildBlocksData() {
  const items = registry.items.filter((item) => item.name !== "index");

  const blocksArray = await Promise.all(
    items.map(async (item) => {
      const cat = item.categories?.[0] ?? "";
      return {
        name: item.name,
        category: cat,
        height: item.meta?.height || "100vh",
        description: item.description ?? "",
        block_number: item.name.split("-").pop(),
        files: [
          {
            type: "page",
            name: "page.tsx",
            code: await loadCode(
              `registry/blocks/${cat}/${item.name.split("-").pop()}/page.tsx`
            ),
            lang: "tsx",
          },
          ...(item.files?.map(async (file) => ({
            type: file.type.replace("registry:", ""),
            name: file.path.split("/").pop(),
            code: await loadCode(
              file.path.startsWith("@/")
                ? file.path.replace("@/", "")
                : `registry/${file.path}`
            ),
            lang: "tsx",
          })) ?? []),
        ],
      };
    })
  );

  // Flatten any nested Promises in `files`
  const resolvedBlocks = await Promise.all(
    blocksArray.map(async (block) => ({
      ...block,
      files: await Promise.all(block.files),
    }))
  );

  const index = `// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import type { Block } from '@/types';

export const blocks: Block[] = ${JSON.stringify(resolvedBlocks, null, 2)};
`;

  console.log(`#️⃣  ${items.length} items found`);

  const outputPath = path.join(process.cwd(), "config/blocks.ts");
  await fs.writeFile(outputPath, index);
}

async function buildRegistryJsonFile() {
  // Fix the path for registry items.
  const fixedRegistry = {
    ...registry,
    items: registry.items.map((item) => {
      const files = item.files?.map((file) => {
        const newPath = file.path.startsWith("@/")
          ? file.path.replace("@/", "")
          : `registry/${file.path}`;
        return {
          ...file,
          path: newPath,
        };
      });

      return {
        ...item,
        files,
      };
    }),
  };

  //  Write the content of the registry to `registry.json`
  rimraf.sync(path.join(process.cwd(), "registry.json"));
  await fs.writeFile(
    path.join(process.cwd(), "registry.json"),
    JSON.stringify(fixedRegistry, null, 2)
  );
}

try {
  await buildBlocksData();
  console.log("✅ Blocks Data file built successfully");
  await buildRegistryJsonFile();
  console.log("✅ Registry JSON file built successfully");
} catch (error) {
  console.error("❌ Build failed with error:");
  console.error(error);
  if (error instanceof Error) {
    console.error("Error stack:", error.stack);
  }
  process.exit(1);
}
