import { promises as fs } from 'fs';
import path from 'path';
import { rimraf } from 'rimraf';

import { registry } from '../registry/index';

async function buildBlocksData() {
	let index = `// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import { Block } from '@/types';
	
export const blocks: Block[] = [`;

	const items = registry.items.filter((item) => item.name !== 'index');

	for (const item of items) {
		index += `
{
	name: "${item.name}",
	category: '${item.categories}',
	description: "${item.description ?? ''}",
	block_number: "${item.name.split('-').pop()}"
},`;
	}

	index += `
];`;

	console.log(`#️⃣  ${registry.items.length} items found`);

	// Write registry data index.
	const outputPath = path.join(process.cwd(), 'config/blocks.ts');
	await rimraf(outputPath);
	await fs.writeFile(outputPath, index);
}

async function buildRegistryJsonFile() {
	// Fix the path for registry items.
	const fixedRegistry = {
		...registry,
		items: registry.items.map((item) => {
			const files = item.files?.map((file) => {
				const newPath = file.path.startsWith('@/')
					? file.path.replace('@/', '')
					: `registry/${file.path}`;
				return {
					...file,
					path: newPath,
				};
			});

			return {
				...item,
				files,
			};
		}),
	};

	//  Write the content of the registry to `registry.json`
	rimraf.sync(path.join(process.cwd(), `registry.json`));
	await fs.writeFile(
		path.join(process.cwd(), `registry.json`),
		JSON.stringify(fixedRegistry, null, 2),
	);
}

try {
	await buildBlocksData();
	console.log('✅ Blocks Data file built successfully');
	await buildRegistryJsonFile();
	console.log('✅ Registry JSON file built successfully');
} catch (error) {
	console.error('❌ Build failed with error:');
	console.error(error);
	if (error instanceof Error) {
		console.error('Error stack:', error.stack);
	}
	process.exit(1);
}
